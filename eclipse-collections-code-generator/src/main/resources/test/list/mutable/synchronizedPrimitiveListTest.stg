import "copyright.stg"
import "primitiveHashCode.stg"
import "primitiveLiteral.stg"
import "primitiveEquals.stg"

isTest() ::= "true"

targetPath() ::= "org/eclipse/collections/impl/list/mutable/primitive"

fileName(primitive) ::= "Synchronized<primitive.name>ListTest"

class(primitive) ::= <<
<body(primitive.type, primitive.wrapperName, primitive.name, primitive.allPrimitives)>
>>

importMutablePrimitiveList(toName) ::= <<
import org.eclipse.collections.api.list.primitive.Mutable<toName>List;
>>

collectPrimitive(toName, toType) ::= <<
@Test
public void collect<toName>()
{
    Synchronized<name>List list = this.newWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">);

    Mutable<toName>List mutable<toName>List =
        list.collect<toName>(<type>Parameter -> (<toType>) (<type>Parameter + <(literal.(type))("1")>));

    Assert.assertEquals(<toName>ArrayList.newListWith(<["2", "3", "4"]:(literal.(toType))(); separator=", ">), mutable<toName>List);
}>>

body(type, wrapperName, name, allPrimitives) ::= <<
<copyright()>

package org.eclipse.collections.impl.list.mutable.primitive;

<allPrimitives:importMutablePrimitiveList()>
import org.junit.Assert;
import org.junit.Test;

/**
 * JUnit test for {@link Synchronized<name>List}.
 * This file was automatically generated from template file synchronizedPrimitiveListTest.stg.
 */
public class Synchronized<name>ListTest extends Abstract<name>ListTestCase
{
    @Override
    protected Synchronized<name>List classUnderTest()
    {
        return new Synchronized<name>List(<name>ArrayList.newListWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">));
    }

    @Override
    protected Synchronized<name>List newWith(<type>... elements)
    {
        return new Synchronized<name>List(<name>ArrayList.newListWith(elements));
    }

    @Override
    @Test
    public void asSynchronized()
    {
        super.asSynchronized();
        Synchronized<name>List list = this.classUnderTest();
        Mutable<name>List listWithLockObject = new Synchronized<name>List(<name>ArrayList.newListWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">), new Object());
        Assert.assertEquals(list, listWithLockObject);
        Assert.assertSame(listWithLockObject, listWithLockObject.asSynchronized());
        Assert.assertSame(list, list.asSynchronized());
        Assert.assertEquals(list, list.asSynchronized());
    }

    <collectPrimitive("Byte", "byte")>

    <collectPrimitive("Short", "short")>

    <collectPrimitive("Char", "char")>

    <collectPrimitive("Int", "int")>

    <collectPrimitive("Long", "long")>

    <collectPrimitive("Float", "float")>

    <collectPrimitive("Double", "double")>

    @Test
    public void collectBoolean()
    {
        Synchronized<name>List list = this.newWith(<["1", "2", "3"]:(literal.(type))(); separator=", ">);

        MutableBooleanList mutableBooleanList = list.collectBoolean(each -> <(equals.(type))("each", {<(literal.(type))("1")>})>);

        Assert.assertEquals(BooleanArrayList.newListWith(true, false, false), mutableBooleanList);
    }
}

>>
